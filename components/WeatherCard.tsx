import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  TouchableOpacity,
  Image,
} from 'react-native';
import { useTranslation } from 'react-i18next';
import { 
  fetchWeatherData, 
  ProcessedWeatherData,
  getWeatherIcon 
} from '../services/weatherService';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–∫–∏ –ø–æ–≥–æ–¥–∏ (—Ç–æ—á–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ 169x118px –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏)
export const WeatherCard: React.FC = () => {
  const { t } = useTranslation();
  const [weatherData, setWeatherData] = useState<ProcessedWeatherData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏ –ø—Ä–∏ –º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadWeatherData();
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–∂–Ω—ñ 10 —Ö–≤–∏–ª–∏–Ω
    const interval = setInterval(loadWeatherData, 10 * 60 * 1000);
    return () => clearInterval(interval);
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø–æ–≥–æ–¥–∏
  const loadWeatherData = async () => {
    try {
      console.log('üå§Ô∏è –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏...');
      setLoading(true);
      setError(false);
      
      const data = await fetchWeatherData();
      console.log('üå§Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç API:', data);
      
      if (data) {
        setWeatherData(data);
        console.log('‚úÖ –î–∞–Ω—ñ –ø–æ–≥–æ–¥–∏ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ:', {
          current: data.currentTemp,
          day: data.dayTemp, 
          night: data.nightTemp,
          description: data.weatherDescription
        });
      } else {
        console.warn('‚ö†Ô∏è API –ø–æ–≤–µ—Ä–Ω—É–≤ null, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –¥–∞–Ω—ñ');
        setWeatherData({
          currentTemp: 26,
          dayTemp: 26,
          nightTemp: 14,
          weatherCode: 0,
          weatherDescription: 'sunny'
        });
      }
    } catch (err) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏:', err);
      setError(true);
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      setWeatherData({
        currentTemp: 26,
        dayTemp: 26,
        nightTemp: 14,
        weatherCode: 0,
        weatherDescription: 'sunny'
      });
    } finally {
      setLoading(false);
      console.log('üèÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    }
  };

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É –ø–æ–≥–æ–¥–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é
  const getWeatherDescriptionUA = (description: string, code: number): string => {
    // –ë–∞–∑–æ–≤–∞–Ω—ñ –Ω–∞ –∫–æ–¥–∞—Ö WMO
    if (code === 0 || code === 1) return '–î–æ—Å–∏—Ç—å —Å–æ–Ω—è—á–Ω–æ';
    if (code === 2) return '–ß–∞—Å—Ç–∫–æ–≤–æ —Ö–º–∞—Ä–Ω–æ';
    if (code === 3) return '–•–º–∞—Ä–Ω–æ';
    if (code >= 45 && code <= 48) return '–¢—É–º–∞–Ω';
    if (code >= 51 && code <= 67) return '–î–æ—â';
    if (code >= 71 && code <= 86) return '–°–Ω—ñ–≥';
    if (code >= 95 && code <= 99) return '–ì—Ä–æ–∑–∞';
    
    return '–î–æ—Å–∏—Ç—å —Å–æ–Ω—è—á–Ω–æ'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  };

  // –Ø–∫—â–æ –π–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
  if (loading) {
    return (
      <View style={styles.card}>
        <ActivityIndicator size="small" color="#E41B85" />
        <Text style={styles.loadingText}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏...</Text>
      </View>
    );
  }

  return (
    <View style={styles.card}>
      {/* –ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É */}
      <Text style={styles.currentTemp}>
        {(weatherData?.currentTemp ?? 26) >= 0 ? '+' : ''}{weatherData?.currentTemp ?? 26}¬∞
      </Text>
      
      {/* –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –≤–µ–ª–∏–∫–∏–º–∏ –∂–∏—Ä–Ω–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏ */}
      <Text style={styles.cityName}>–ó–ê–ü–û–†–Ü–ñ–ñ–Ø</Text>
      
      {/* –û–ø–∏—Å –ø–æ–≥–æ–¥–∏ */}
      <Text style={styles.weatherDescription}>
        {weatherData ? getWeatherDescriptionUA(weatherData.weatherDescription, weatherData.weatherCode) : '–î–æ—Å–∏—Ç—å —Å–æ–Ω—è—á–Ω–æ'}
      </Text>
      
      {/* –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–µ–Ω—å/–Ω—ñ—á –∑ —ñ–∫–æ–Ω–∫–∞–º–∏ */}
      <View style={styles.dayNightContainer}>
        <View style={styles.tempColumn}>
          <Image
            source={require('../assets/sun.png')}
            style={styles.tempIcon}
            resizeMode="contain"
          />
                     <Text style={styles.tempValue}>
             {weatherData?.dayTemp ?? 26}
           </Text>
        </View>
        
        <View style={styles.tempColumn}>
          <Image
            source={require('../assets/moon.png')}
            style={styles.tempIcon}
            resizeMode="contain"
          />
                     <Text style={styles.tempValue}>
             {weatherData?.nightTemp ?? 14}
           </Text>
        </View>
      </View>

      {/* –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ */}
      {error && (
        <TouchableOpacity style={styles.refreshButton} onPress={loadWeatherData}>
          <Text style={styles.refreshText}>‚Üª</Text>
        </TouchableOpacity>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  card: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 12,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
    width: 169,
    height: 118,
    justifyContent: 'center',
    position: 'relative',
  },
  currentTemp: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 2,
    fontFamily: 'e-Ukraine',
  },
  cityName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#E41B85',
    letterSpacing: 0.5,
    marginBottom: 2,
    fontFamily: 'e-Ukraine',
    textAlign: 'center',
    alignSelf: 'center',
  },
  weatherDescription: {
    fontSize: 10,
    color: '#333',
    marginBottom: 4,
    fontFamily: 'e-Ukraine',
    textAlign: 'center',
  },
  dayNightContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    width: '100%',
    gap: 20,
  },
  tempColumn: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  tempIcon: {
    width: 16,
    height: 16,
    marginRight: 4,
  },
  tempValue: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#333',
    fontFamily: 'e-Ukraine',
  },
  loadingText: {
    textAlign: 'center',
    color: '#666',
    fontFamily: 'e-Ukraine',
    fontSize: 10,
  },
  refreshButton: {
    position: 'absolute',
    top: 8,
    right: 8,
    width: 20,
    height: 20,
    borderRadius: 10,
    backgroundColor: 'rgba(228, 27, 133, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  refreshText: {
    fontSize: 12,
    color: '#E41B85',
    fontWeight: 'bold',
  },
}); 